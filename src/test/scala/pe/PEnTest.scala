// PEn Test
package pe

import java.io.File

import breeze.linalg._
import breeze.linalg.{DenseMatrix, DenseVector}
import chisel3._
import chisel3.util._
import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester}
import simulator._
import config._

class PEnTests(c: PEn) extends PeekPokeTester(c) {
  val filterNum = 3
  val imgNum = 1
  val singleFilterLen = 3
  val singleImgLen = 5
  val nchannel = 3
  poke(c.io.peconfig.filterNum, filterNum)
  poke(c.io.peconfig.imgNum, imgNum)
  poke(c.io.peconfig.singleFilterLen, singleFilterLen)
  poke(c.io.peconfig.singleImgLen, singleImgLen)
  poke(c.io.peconfig.nchannel, nchannel)
  poke(c.io.totalSingleFilterNum, singleFilterLen * nchannel)
  poke(c.io.totalFilterNum, singleFilterLen * filterNum * nchannel)
  poke(c.io.stateSW, 0)
  poke(c.io.oSumSRAM.ready, 1)
  step(1)
  poke(c.io.stateSW, 1)
  poke(c.io.filter.valid, 1)
  poke(c.io.filter.bits, 72340172838076673L)
  poke(c.io.img.valid, 1)
  poke(c.io.img.bits, 72340172838076673L)
  step(50)
  poke(c.io.stateSW, 2)
//  poke(c.io.filter.valid, 0)
//  poke(c.io.filter.bits, 0)
//  poke(c.io.img.valid, 0)
//  poke(c.io.img.bits, 0)
  step(100)
}

class PEnTester extends ChiselFlatSpec {
  implicit val p = new DefaultConfig
  "running with --generate-vcd-output on" should "create a vcd file from your test" in {
    iotesters.Driver.execute(
      Array(
        "--generate-vcd-output", "on",
        "--target-dir", "test_run_dir/make_PEn_vcd",
        "--top-name", "make_PEn_vcd",
        "--backend-name", "verilator"
      ),
      () => new PEn
    ) {
      c => new PEnTests(c)
    } should be(true)
  }
}
